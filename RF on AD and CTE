import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder


# File paths
ad_file_path = r"C:\Users\brand\Desktop\PyCharm Community Edition 2024.3\Biomarkers\AD_combined_filtered_species.csv"
cte_file_path = r"C:\Users\brand\Desktop\PyCharm Community Edition 2024.3\Biomarkers\CTE_combined_filtered_species.csv"
output_dir = r"C:\Users\brand\Desktop\PyCharm Community Edition 2024.3\Biomarkers"


# Load datasets
ad_data = pd.read_csv(ad_file_path)
cte_data = pd.read_csv(cte_file_path)

# Exclude unnecessary columns
columns_to_exclude = ['Source', 'label', 'SubjectID']
ad_data_filtered = ad_data.drop(columns=[col for col in columns_to_exclude if col in ad_data.columns], errors='ignore')
cte_data_filtered = cte_data.drop(columns=[col for col in columns_to_exclude if col in cte_data.columns], errors='ignore')

# Find similar biomarkers (intersection of columns)
similar_biomarkers = set(ad_data_filtered.columns).intersection(set(cte_data_filtered.columns))
similar_biomarkers_list = list(similar_biomarkers)

# Extract all values for the similar biomarkers and add a "Dataset" column
ad_values = ad_data_filtered[similar_biomarkers_list].copy()
ad_values["Dataset"] = "AD"

cte_values = cte_data_filtered[similar_biomarkers_list].copy()
cte_values["Dataset"] = "CTE"

# Combine the data
combined_values = pd.concat([ad_values, cte_values], ignore_index=True)

# Encode target variable and split data
X = combined_values[similar_biomarkers_list]
y = combined_values["Dataset"]
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)  # Encode 'AD' as 0, 'CTE' as 1

# Train/test split
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

# Train Random Forest model
rf_model = RandomForestClassifier(random_state=42, n_estimators=100)
rf_model.fit(X_train, y_train)

# Predict on test data
y_pred = rf_model.predict(X_test)

# Evaluate the model
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Accuracy Score:", accuracy_score(y_test, y_pred))


