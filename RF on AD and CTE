import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score
from imblearn.over_sampling import SMOTE
import numpy as np

# Load the dataset
file_path = r"C:\Users\brand\Desktop\PyCharm Community Edition 2024.3\Biomarkers\biomarker_all_values_comparison_with_subject_id.csv"
data = pd.read_csv(file_path)

# Derive the Dataset column from SubjectID (e.g., "Alz_" implies AD, others CTE)
data['Dataset'] = data['SubjectID'].apply(lambda x: 'AD' if 'Alz_' in x else 'CTE')

# Drop SubjectID and Dataset to create feature set; use Dataset as the target variable
X = data.drop(columns=['SubjectID', 'Dataset'])
y = data['Dataset'].map({'AD': 0, 'CTE': 1})  # Encode target: 0 = AD, 1 = CTE

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Balance the dataset using SMOTE
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

# Train the Random Forest model on the balanced dataset
rf_model_balanced = RandomForestClassifier(random_state=42, n_estimators=100)
rf_model_balanced.fit(X_resampled, y_resampled)

# Make predictions on the test set
y_pred_balanced = rf_model_balanced.predict(X_test)
y_pred_proba = rf_model_balanced.predict_proba(X_test)[:, 1]  # Probabilities for ROC-AUC

# Evaluate the model
accuracy_balanced = accuracy_score(y_test, y_pred_balanced)
roc_auc = roc_auc_score(y_test, y_pred_proba)
# Generate and print the classification report with target names
report_balanced = classification_report(
    y_test,
    y_pred_balanced,
    target_names=['AD', 'CTE']
)

print("\nClassification Report:")
print(report_balanced)

print(f"Balanced Model Accuracy: {accuracy_balanced:.2f}")
print(f"ROC-AUC Score: {roc_auc:.2f}")

# Get feature importances from the trained Random Forest model
feature_importances = rf_model_balanced.feature_importances_

# Create a DataFrame to map features to their importance scores
feature_importance_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importances
})

# Sort the features by importance in descending order
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Display the top 10 features
top_10_features = feature_importance_df.head(10)
print("\nTop 10 Features by Importance:")
print(top_10_features)



